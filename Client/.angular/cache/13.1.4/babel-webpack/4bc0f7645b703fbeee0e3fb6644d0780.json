{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\prati\\\\OneDrive\\\\Desktop\\\\EHR 2.0 SCO\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { localAPI } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/blockchain.service\";\nimport * as i2 from \"src/services/ipfs.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class PatientServiceService {\n  constructor(blockchainService, ipfsService, http) {\n    this.blockchainService = blockchainService;\n    this.ipfsService = ipfsService;\n    this.http = http;\n    this.ipfs = ipfsService.getIPFS();\n  } //Check if Patient\n\n\n  checkIsPatient() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.blockchainService.getAccount().then(acc => {\n          _this.account = acc;\n\n          _this.blockchainService.getContract().then(r => {\n            _this.contract = r;\n\n            _this.contract.methods.isPat(_this.account).call().then(result => {\n              console.log(result);\n              resolve(result);\n            }).catch(err => {\n              console.log(err);\n              reject(err);\n            });\n          }).catch(err => {\n            console.log(err);\n          });\n        });\n      });\n    })();\n  } //get Patient Details\n\n\n  getPatientDetails() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let id = _this2.account;\n      return new Promise((resolve, reject) => {\n        _this2.blockchainService.getAccount().then(acc => {\n          id = acc;\n\n          _this2.blockchainService.getContract().then(r => {\n            _this2.contract = r;\n\n            _this2.contract.methods.getPatInfo(id).call().then(result => {\n              console.log(result);\n\n              _this2.http.get(localAPI + result).subscribe(data => {\n                console.log(data);\n                resolve(data);\n              });\n            }).catch(err => {\n              console.log(err);\n              reject(err);\n            });\n          }).catch(err => {\n            reject(err);\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    })();\n  } //get patientRecords\n\n\n  getPatientRecords() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let id = _this3.account;\n      return new Promise((resolve, reject) => {\n        _this3.blockchainService.getAccount().then(acc => {\n          _this3.account = acc;\n          id = _this3.account;\n\n          _this3.blockchainService.getContract().then(r => {\n            _this3.contract = r;\n\n            _this3.contract.methods.viewMedRec(id).call().then(result => {\n              console.log(result);\n\n              if (result.length >= 1) {\n                _this3.http.get('http://127.0.0.1:8080/ipfs/' + result).subscribe(data => {\n                  console.log(data);\n                  resolve(data);\n                });\n              } else {\n                resolve(null);\n              }\n            }).catch(err => {\n              console.log(err);\n              reject(err);\n            });\n          });\n        });\n      });\n    })();\n  } //Get Appointments\n\n\n  getPatAppointments() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let check = setInterval(() => {\n          _this4.account = _this4.blockchainService.account;\n\n          if (_this4.account) {\n            console.log(typeof _this4.account);\n\n            _this4.http.get('http://localhost:8000/api/getAppointmentPat/' + _this4.account).subscribe(result => {\n              console.log(result.data);\n              resolve(result);\n              clearInterval(check);\n            });\n          }\n        }, 1000);\n      });\n    })();\n  }\n\n  getAccountBalance() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this5.blockchainService.getBalance().then(b => {\n          resolve(b);\n        });\n      });\n    })();\n  }\n\n}\n\nPatientServiceService.ɵfac = function PatientServiceService_Factory(t) {\n  return new (t || PatientServiceService)(i0.ɵɵinject(i1.BlockchainService), i0.ɵɵinject(i2.IpfsService), i0.ɵɵinject(i3.HttpClient));\n};\n\nPatientServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PatientServiceService,\n  factory: PatientServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/prati/OneDrive/Desktop/EHR 2.0 SCO/Client/src/patient/services/patient-service.service.ts"],"names":["localAPI","i0","i1","i2","i3","PatientServiceService","constructor","blockchainService","ipfsService","http","ipfs","getIPFS","checkIsPatient","Promise","resolve","reject","getAccount","then","acc","account","getContract","r","contract","methods","isPat","call","result","console","log","catch","err","getPatientDetails","id","getPatInfo","get","subscribe","data","getPatientRecords","viewMedRec","length","getPatAppointments","check","setInterval","clearInterval","getAccountBalance","getBalance","b","ɵfac","PatientServiceService_Factory","t","ɵɵinject","BlockchainService","IpfsService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { localAPI } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/services/blockchain.service\";\r\nimport * as i2 from \"src/services/ipfs.service\";\r\nimport * as i3 from \"@angular/common/http\";\r\nexport class PatientServiceService {\r\n    constructor(blockchainService, ipfsService, http) {\r\n        this.blockchainService = blockchainService;\r\n        this.ipfsService = ipfsService;\r\n        this.http = http;\r\n        this.ipfs = ipfsService.getIPFS();\r\n    }\r\n    //Check if Patient\r\n    async checkIsPatient() {\r\n        return new Promise((resolve, reject) => {\r\n            this.blockchainService.getAccount().then((acc) => {\r\n                this.account = acc;\r\n                this.blockchainService\r\n                    .getContract()\r\n                    .then((r) => {\r\n                    this.contract = r;\r\n                    this.contract.methods\r\n                        .isPat(this.account)\r\n                        .call()\r\n                        .then((result) => {\r\n                        console.log(result);\r\n                        resolve(result);\r\n                    })\r\n                        .catch((err) => {\r\n                        console.log(err);\r\n                        reject(err);\r\n                    });\r\n                })\r\n                    .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    //get Patient Details\r\n    async getPatientDetails() {\r\n        let id = this.account;\r\n        return new Promise((resolve, reject) => {\r\n            this.blockchainService\r\n                .getAccount()\r\n                .then((acc) => {\r\n                id = acc;\r\n                this.blockchainService\r\n                    .getContract()\r\n                    .then((r) => {\r\n                    this.contract = r;\r\n                    this.contract.methods\r\n                        .getPatInfo(id)\r\n                        .call()\r\n                        .then((result) => {\r\n                        console.log(result);\r\n                        this.http\r\n                            .get(localAPI + result)\r\n                            .subscribe((data) => {\r\n                            console.log(data);\r\n                            resolve(data);\r\n                        });\r\n                    })\r\n                        .catch((err) => {\r\n                        console.log(err);\r\n                        reject(err);\r\n                    });\r\n                })\r\n                    .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            })\r\n                .catch((err) => {\r\n                console.log(err);\r\n            });\r\n        });\r\n    }\r\n    //get patientRecords\r\n    async getPatientRecords() {\r\n        let id = this.account;\r\n        return new Promise((resolve, reject) => {\r\n            this.blockchainService.getAccount().then((acc) => {\r\n                this.account = acc;\r\n                id = this.account;\r\n                this.blockchainService.getContract().then((r) => {\r\n                    this.contract = r;\r\n                    this.contract.methods\r\n                        .viewMedRec(id)\r\n                        .call()\r\n                        .then((result) => {\r\n                        console.log(result);\r\n                        if (result.length >= 1) {\r\n                            this.http\r\n                                .get('http://127.0.0.1:8080/ipfs/' + result)\r\n                                .subscribe((data) => {\r\n                                console.log(data);\r\n                                resolve(data);\r\n                            });\r\n                        }\r\n                        else {\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                        .catch((err) => {\r\n                        console.log(err);\r\n                        reject(err);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    //Get Appointments\r\n    async getPatAppointments() {\r\n        return new Promise((resolve, reject) => {\r\n            let check = setInterval(() => {\r\n                this.account = this.blockchainService.account;\r\n                if (this.account) {\r\n                    console.log(typeof this.account);\r\n                    this.http\r\n                        .get('http://localhost:8000/api/getAppointmentPat/' + this.account)\r\n                        .subscribe((result) => {\r\n                        console.log(result.data);\r\n                        resolve(result);\r\n                        clearInterval(check);\r\n                    });\r\n                }\r\n            }, 1000);\r\n        });\r\n    }\r\n    async getAccountBalance() {\r\n        return new Promise((resolve, reject) => {\r\n            this.blockchainService.getBalance().then((b) => {\r\n                resolve(b);\r\n            });\r\n        });\r\n    }\r\n}\r\nPatientServiceService.ɵfac = function PatientServiceService_Factory(t) { return new (t || PatientServiceService)(i0.ɵɵinject(i1.BlockchainService), i0.ɵɵinject(i2.IpfsService), i0.ɵɵinject(i3.HttpClient)); };\r\nPatientServiceService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PatientServiceService, factory: PatientServiceService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}